// Prisma schema for PostgreSQL
// Generated by requirements

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")   // app / general usage
  directUrl = env("DIRECT_URL")     // migrations / push / studio
}

enum Gender {
  M
  F
}

enum Role {
  Doctor
  AdminAssistant
  ITAdmin
  Pharmacist
  PharmacyTech
  InventoryManager
}

enum AppointmentStatus {
  Scheduled
  CheckedIn
  InProgress
  Completed
  Cancelled
}

model Patient {
  patientId    String   @id @default(uuid()) @db.Uuid
  name         String
  dob          DateTime @db.Date
  gender       Gender
  contact      String?
  insurance    String?
  drugAllergies String?
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  appointments Appointment[]
  visits       Visit[]
  observations Observation[]
  prescriptions Prescription[]
}

model Doctor {
  doctorId    String   @id @default(uuid()) @db.Uuid
  name        String
  department  String
  createdAt   DateTime @default(now())

  appointments  Appointment[]
  availabilities DoctorAvailability[]
  blackouts      DoctorBlackout[]
  visits       Visit[]
  observations Observation[]
  user         User?
  prescriptions Prescription[]
}

model Appointment {
  appointmentId String             @id @default(uuid()) @db.Uuid
  patientId     String             @db.Uuid
  doctorId      String             @db.Uuid
  department    String
  date          DateTime
  startTimeMin  Int
  endTimeMin    Int
  reason        String?
  location      String?
  status        AppointmentStatus @default(Scheduled)
  cancelReason  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  patient Patient @relation(fields: [patientId], references: [patientId])
  doctor  Doctor  @relation(fields: [doctorId], references: [doctorId])

  @@index([doctorId, date, startTimeMin, endTimeMin])
  @@index([patientId, date])
}

model DoctorAvailability {
  availabilityId String @id @default(uuid()) @db.Uuid
  doctorId       String @db.Uuid
  dayOfWeek      Int
  startMin       Int
  endMin         Int

  doctor Doctor @relation(fields: [doctorId], references: [doctorId])

  @@index([doctorId, dayOfWeek])
}

model DoctorBlackout {
  blackoutId String   @id @default(uuid()) @db.Uuid
  doctorId   String   @db.Uuid
  startAt    DateTime
  endAt      DateTime
  reason     String?

  doctor Doctor @relation(fields: [doctorId], references: [doctorId])

  @@index([doctorId, startAt, endAt])
}

model Visit {
  visitId     String   @id @default(uuid()) @db.Uuid
  patientId   String   @db.Uuid
  visitDate   DateTime @db.Date
  doctorId    String   @db.Uuid
  department  String
  reason      String?
  createdAt   DateTime @default(now())

  patient      Patient     @relation(fields: [patientId], references: [patientId])
  doctor       Doctor      @relation(fields: [doctorId], references: [doctorId])
  diagnoses    Diagnosis[]
  medications  Medication[]
  labResults   LabResult[]
  observations Observation[]
  prescriptions Prescription[]

  @@index([patientId, visitDate(sort: Desc)])
  @@index([doctorId, visitDate(sort: Desc)])
}

model Diagnosis {
  diagId     String   @id @default(uuid()) @db.Uuid
  visitId    String   @db.Uuid
  diagnosis  String
  createdAt  DateTime @default(now())

  visit Visit @relation(fields: [visitId], references: [visitId])
}

model Medication {
  medId         String   @id @default(uuid()) @db.Uuid
  visitId       String   @db.Uuid
  drugName      String
  dosage        String?
  instructions  String?
  createdAt     DateTime @default(now())

  visit Visit @relation(fields: [visitId], references: [visitId])
}

model LabResult {
  labId           String   @id @default(uuid()) @db.Uuid
  visitId         String   @db.Uuid
  testName        String
  resultValue     Float?
  unit            String?
  referenceRange  String?
  testDate        DateTime? @db.Date
  createdAt       DateTime @default(now())

  visit Visit @relation(fields: [visitId], references: [visitId])
}

model Observation {
  obsId        String   @id @default(uuid()) @db.Uuid
  visitId      String   @db.Uuid
  patientId    String   @db.Uuid
  doctorId     String   @db.Uuid
  noteText     String
  bpSystolic   Int?
  bpDiastolic  Int?
  heartRate    Int?
  temperatureC Float?
  spo2         Int?
  bmi          Float?
  createdAt    DateTime @default(now())

  visit   Visit   @relation(fields: [visitId], references: [visitId])
  patient Patient @relation(fields: [patientId], references: [patientId])
  doctor  Doctor  @relation(fields: [doctorId], references: [doctorId])

  @@index([patientId, doctorId, createdAt(sort: Desc)])
}

model User {
  userId       String   @id @default(uuid()) @db.Uuid
  email        String   @unique
  passwordHash String
  role         Role
  status       String   @default("active")
  doctorId     String?  @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  doctor   Doctor?  @relation(fields: [doctorId], references: [doctorId])
  sessions Session[]
  dispenses Dispense[]
  passwordResetTokens PasswordResetToken[]

  @@unique([doctorId])
}

model PasswordResetToken {
  tokenId    String   @id @default(uuid()) @db.Uuid
  userId     String   @db.Uuid
  tokenHash  String
  expiresAt  DateTime @db.Timestamptz(6)
  usedAt     DateTime? @db.Timestamptz(6)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
}

model Session {
  sessionId        String   @id @default(uuid()) @db.Uuid
  userId           String   @db.Uuid
  refreshTokenHash String
  issuedAt         DateTime
  expiresAt        DateTime
  revokedAt        DateTime?
  ip               String?
  ua               String?

  user User @relation(fields: [userId], references: [userId])
}

model AuthAudit {
  id      String   @id @default(uuid()) @db.Uuid
  userId  String?  @db.Uuid
  event   String
  outcome String
  meta    Json?
  ts      DateTime @default(now())
}

model Drug {
  drugId       String   @id @default(uuid()) @db.Uuid
  name         String
  genericName  String?
  form         String
  strength     String
  routeDefault String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  stocks              StockItem[]
  prescriptionItems   PrescriptionItem[]
  dispenseItems       DispenseItem[]
}

model Prescription {
  prescriptionId String              @id @default(uuid()) @db.Uuid
  visitId        String              @db.Uuid
  doctorId       String              @db.Uuid
  patientId      String              @db.Uuid
  status         PrescriptionStatus  @default(PENDING)
  notes          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt

  visit       Visit   @relation(fields: [visitId], references: [visitId], onDelete: Cascade)
  doctor      Doctor  @relation(fields: [doctorId], references: [doctorId], onDelete: Cascade)
  patient     Patient @relation(fields: [patientId], references: [patientId], onDelete: Cascade)
  items       PrescriptionItem[]
  dispenses   Dispense[]

  @@index([visitId, status])
  @@index([patientId, status])
}

model PrescriptionItem {
  itemId             String             @id @default(uuid()) @db.Uuid
  prescriptionId     String             @db.Uuid
  drugId             String             @db.Uuid
  dose               String
  route              String
  frequency          String
  durationDays       Int
  quantityPrescribed Int
  prn                Boolean           @default(false)
  allowGeneric       Boolean           @default(true)
  notes              String?

  prescription Prescription @relation(fields: [prescriptionId], references: [prescriptionId], onDelete: Cascade)
  drug         Drug         @relation(fields: [drugId], references: [drugId])
  dispenseItems DispenseItem[]

  @@index([prescriptionId])
}

model Dispense {
  dispenseId     String          @id @default(uuid()) @db.Uuid
  prescriptionId String          @db.Uuid
  pharmacistId   String          @db.Uuid
  status         DispenseStatus  @default(READY)
  dispensedAt    DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  prescription Prescription @relation(fields: [prescriptionId], references: [prescriptionId], onDelete: Cascade)
  pharmacist   User         @relation(fields: [pharmacistId], references: [userId], onDelete: Restrict)
  items        DispenseItem[]

  @@index([prescriptionId])
}

model DispenseItem {
  dispenseItemId     String    @id @default(uuid()) @db.Uuid
  dispenseId         String    @db.Uuid
  prescriptionItemId String    @db.Uuid
  stockItemId        String?   @db.Uuid
  drugId             String    @db.Uuid
  quantity           Int
  unitPrice          Decimal?  @db.Decimal(10, 2)

  dispense          Dispense        @relation(fields: [dispenseId], references: [dispenseId], onDelete: Cascade)
  prescriptionItem  PrescriptionItem @relation(fields: [prescriptionItemId], references: [itemId], onDelete: Cascade)
  stockItem         StockItem?      @relation(fields: [stockItemId], references: [stockItemId], onDelete: SetNull)
  drug              Drug            @relation(fields: [drugId], references: [drugId])

  @@index([dispenseId])
  @@index([prescriptionItemId])
}

model StockItem {
  stockItemId String    @id @default(uuid()) @db.Uuid
  drugId      String    @db.Uuid
  batchNo     String?
  expiryDate  DateTime?
  location    String
  qtyOnHand   Int       @default(0)
  unitCost    Decimal?  @db.Decimal(10, 2)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  drug        Drug      @relation(fields: [drugId], references: [drugId], onDelete: Cascade)
  dispenseItems DispenseItem[]

  @@index([drugId])
  @@index([location])
  @@index([expiryDate])
}

enum PrescriptionStatus {
  PENDING
  PARTIAL
  DISPENSED
  CANCELLED
}

enum DispenseStatus {
  READY
  PARTIAL
  COMPLETED
  CANCELLED
}
